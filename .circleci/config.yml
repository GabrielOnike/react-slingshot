# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# LESSON:  HANDLING ON FAIL
defaults: &defaults
  docker:
        - image: circleci/node:13.8.0

# Create a command named print_pipeline_id with a step that prints the Circle CI Workflow ID from its environment variable named $CIRCLE_WORKFLOW_ID to the console
# also i utilised parameters to in the command below
commands:
  print_pipeline_id:
    description: print pipeline id command
    parameters:
      to: 
        type: string
        default: "hello print pipeline id"
        # dfeaults arent necessary but coome in if not called
    steps:  
      - run: echo ${CIRCLE_WORKFLOW_ID} << parameters.to >>


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run: exit 1
      - run: 
          name: 'upload fails'
          command: echo 'alarm alarm! it has failed'
          when: on_fail

  save_hello_world_output:
    <<: *defaults
    steps:
      - print_pipeline_id:
            id: << pipeline.id >>
            # to: "Gabe"


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
      - save_hello_world_output
      
